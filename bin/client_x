#!/usr/bin/env python3

""" Stand alone client to integration test the psimbols server.

This client does not use any code from the main psimbols project.
Run it to exercise a running psimbols server. The server must have
been configured with the client id and AES key.

The default client is c256 which uses a 256-bit key.
"""

import argparse
import json
import logging
import requests
import sys

def read_config(filename):
    try:
        with open(filename, 'r') as f:
            config = json.load(f)
            errors = 0
            for property in ('client', 'server', 'key'):
                if property not in config:
                    logging.error("Config has no '" + property + "' property")
                    errors += 1

        return config if errors == 0 else None

    except IOError:
        logging.error('Could not read file')
    except json.JSONDecodeError:
        logging.error('Could not parse file as JSON')

def check_broken(server, expected_code, client, request):
    data = {}
    if len(client) > 0:
        data['client'] = client
    if len(request) > 0:
        data['request'] = request

    posted = json.dumps(data)
    response = requests.post(server, data=posted)

    expected = str(expected_code) + ' as expected for bad request ' + posted

    if response.status_code == expected_code:
        logging.info(expected)
    else:
        logging.error(str(response.status_code) + ' not ' + expected)

# parse the command-line
parser = argparse.ArgumentParser(description='client_x')
    
parser.add_argument('-c', '--config', 
    help='client configuration file (default %(default)s)',
    default='config/c256.json')
    
args = parser.parse_args()

# turn on logging
logging.basicConfig(
    format='%(asctime)s %(levelname)s %(message)s',
    level=logging.INFO)

logging.info('Reading client config from ' + args.config)
config = read_config(args.config)
if config is None:
    sys.exit(1)

logging.info('Using client ' + config['client'])

# use a plain GET request as a health check on the server
server_text = 'Server ' + config['server']
try:
    response = requests.get(config['server'])

except requests.exceptions.RequestException:
    logging.error(server_text + ' failed to respond')
    sys.exit(1)

if response.ok:
    logging.info(server_text + ' responded OK')
else:
    logging.error(server_text + ' responded ' + str(response.status_code))
    sys.exit(1)

## try sending broken requests

# too short
check_broken(config['server'], 400, client='', request='')

# unknown client
check_broken(config['server'], 401,
             client='12345678901234567890123456789012', request='')

# garbage request
check_broken(config['server'], 401, 
             client=config['client'], request='something rubbish')

